-------------------------------------------------- <<< primitives >>> --------------------------------------------------
  0: [unsigned 8-bit] std::u8
  1: [signed 8-bit] std::i8
  2: [unsigned 16-bit] std::u16
  3: [signed 16-bit] std::i16
  4: [unsigned 32-bit] std::u32
  5: [signed 32-bit] std::i32
  6: [unsigned 64-bit] std::u64
  7: [signed 64-bit] std::i64
  8: [exponent 32-bit] std::f32
  9: [exponent 64-bit] std::f64

------------------------------------------- <<< instructions : esp32_env >>> -------------------------------------------
  0: [1B] plotter::exit@0()
  1: [3B] plotter::delay@1(std::u16)
  2: [2B] plotter::set_motors_speed@2(std::u8)
  3: [2B] plotter::set_progress@3(std::u8)
  4: [3B] plotter::set_speed_multiplication@4(std::u16)
  5: [5B] plotter::move_to@5(std::i16, std::i16)

------------------------------------------- <<< profile : esp32_profile >>> --------------------------------------------
parent                  : 'A:\\Program\\Python3\\CablePlotterApp\\res\\bytelang\\profiles\\esp32_profile.json'
name                    : 'esp32_profile'
max_program_length      : None
pointer_program         : [unsigned 16-bit] std::u16
pointer_heap            : [unsigned 8-bit] std::u8
instruction_index       : [unsigned 8-bit] std::u8
----------------------- <<< statements : A:\Program\Python3\CablePlotterApp\res\out\test.bls >>> -----------------------
  0: .env esp32_env                   DIRECTIVE_USE@1                  env(<esp32_env>)
  1: set_motors_speed 8               INSTRUCTION_CALL@2               set_motors_speed({ 8 | 8.0 })
  2: move_to 100 100                  INSTRUCTION_CALL@3               move_to({ 100 | 100.0 }, { 100 | 100.0 })
  3: move_to -100 100                 INSTRUCTION_CALL@4               move_to({ -100 | -100.0 }, { 100 | 100.0 })
  4: move_to -100 -100                INSTRUCTION_CALL@5               move_to({ -100 | -100.0 }, { -100 | -100.0 })
  5: move_to 100 -100                 INSTRUCTION_CALL@6               move_to({ 100 | 100.0 }, { -100 | -100.0 })
  6: exit                             INSTRUCTION_CALL@7               exit()

-------------------------------------------------- <<< constants >>> ---------------------------------------------------

-------------------------------------------------- <<< variables >>> ---------------------------------------------------


------------------- <<< code instructions : A:\Program\Python3\CablePlotterApp\res\out\test.bls >>> --------------------
  0: [2B] plotter::set_motors_speed@2 { (std::u8)08 }
  1: [5B] plotter::move_to@5 { (std::i16)6400, (std::i16)6400 }
  2: [5B] plotter::move_to@5 { (std::i16)9CFF, (std::i16)6400 }
  3: [5B] plotter::move_to@5 { (std::i16)9CFF, (std::i16)9CFF }
  4: [5B] plotter::move_to@5 { (std::i16)6400, (std::i16)9CFF }
  5: [1B] plotter::exit@0 {  }

--------------------- <<< bytecode view : A:\Program\Python3\CablePlotterApp\res\out\test.blc >>> ----------------------

#  program start address define
0000: 01

#  [2B] plotter::set_motors_speed@2 { (std::u8)08 }
0001: 02
0002: 08

#  [5B] plotter::move_to@5 { (std::i16)6400, (std::i16)6400 }
0003: 05
0004: 64
0005: 00
0006: 64
0007: 00

#  [5B] plotter::move_to@5 { (std::i16)9CFF, (std::i16)6400 }
0008: 05
0009: 9C
000A: FF
000B: 64
000C: 00

#  [5B] plotter::move_to@5 { (std::i16)9CFF, (std::i16)9CFF }
000D: 05
000E: 9C
000F: FF
0010: 9C
0011: FF

#  [5B] plotter::move_to@5 { (std::i16)6400, (std::i16)9CFF }
0012: 05
0013: 64
0014: 00
0015: 9C
0016: FF

#  [1B] plotter::exit@0 {  }
0017: 00
